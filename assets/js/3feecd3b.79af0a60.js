"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2984],{145:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var a=n(4848),o=n(8453);const i={layout:"default",sidebar_position:8,title:"Adopt practices"},s="Adopt practices",r={id:"get-involved/adopting",title:"Adopt practices",description:"Being ClearlyDefined can be more of an intent than an action. Many projects already make",source:"@site/docs/get-involved/adopting.md",sourceDirName:"get-involved",slug:"/get-involved/adopting",permalink:"/docs/get-involved/adopting",draft:!1,unlisted:!1,editUrl:"https://github.com/clearlydefined/clearlydefined/docs/get-involved/adopting.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{layout:"default",sidebar_position:8,title:"Adopt practices"},sidebar:"tutorialSidebar",previous:{title:"Add a harvest",permalink:"/docs/get-involved/adding-sources"},next:{title:"Curation",permalink:"/docs/curation/"}},l={},c=[{value:"Source location as a case-study",id:"source-location-as-a-case-study",level:3},{value:"Explicit data",id:"explicit-data",level:3},{value:"Help define this space",id:"help-define-this-space",level:3}];function d(e){const t={code:"code",em:"em",h1:"h1",h3:"h3",p:"p",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"adopt-practices",children:"Adopt practices"}),"\n",(0,a.jsx)(t.p,{children:"Being ClearlyDefined can be more of an intent than an action. Many projects already make\nthe necessary data (e.g., license, source location, attribution parties) available in easy\nto find places. Awesome! As long as the harvesting tools can find the info and you are\nconsistent about keeping it up-to-date, all is good."}),"\n",(0,a.jsx)(t.p,{children:'For some however, there may be a few steps. One of the core philosophies of ClearlyDefined\nis "meet them where they are". That is, we are not looking to drive a particular behavior\nor format on your normal development process or repo structure. Rather we are aware of a\nhost of conventions and we only need hints from you as to which approach you are taking.'}),"\n",(0,a.jsx)(t.h3,{id:"source-location-as-a-case-study",children:"Source location as a case-study"}),"\n",(0,a.jsx)(t.p,{children:"One key thing to note is that ClearlyDefined is about project releases, components. That is\nafter all what people consume. Knowing the source location of the version of the component you\nare using is critical if you want to do targeted fixes, understand attributions, do deep code\nanalysis such as security reviews, or even simply to fulfill the source disclosure obligations\nof copy-left licenses."}),"\n",(0,a.jsxs)(t.p,{children:["So whatever your release process, we are after two pieces of info: the repo location/type, and\nthe exact revision that matches each released version. If you are using a structured packaging\nsystem like npm, this is pretty simple. There is a ",(0,a.jsx)(t.code,{children:"repository"})," property in the package metadata\nand by convention the indicated Git repo will have a ",(0,a.jsx)(t.code,{children:"tag"})," that matches the package version.\nVoila! No work. We just needed to know the convention and you just needed to follow it."]}),"\n",(0,a.jsx)(t.p,{children:"Our tools will do this kind of snooping automatically across a range of the data and formats\nsupported."}),"\n",(0,a.jsx)(t.h3,{id:"explicit-data",children:"Explicit data"}),"\n",(0,a.jsx)(t.p,{children:"In the npm case the convention at play is inferred. In other cases, approaches are ambiguous.\nFor example, not everyone maintains their license information (e.g., the license itself or\nthe list of attributable parties) in the same place or in the same way. Some projects want\neveryone in the gitlog attributed. For others it is all the copyright holders. For others it\nis the project itself. Dropping us a hint as to what approach you want clears up any ambiguity\nand makes it easy for the relevant data to be gathered."}),"\n",(0,a.jsxs)(t.p,{children:["You can leave that hint in a very simple ",(0,a.jsx)(t.code,{children:"clearly.yaml"})," file in your release and/or in your\nrepo. The details of this file are still being worked out. We actually aren't interested in\nfoisting another file/format on the world so if your community already has a convention for\nwhere to store ",(0,a.jsx)(t.em,{children:"metadata"}),", we just need to learn about that and then can look there for the\nhints."]}),"\n",(0,a.jsxs)(t.p,{children:["Keep in mind that these hints are ",(0,a.jsx)(t.em,{children:"metadata"})," -- it would indicate how to find the license or\nattributable parties rather than give that information directly. That makes it an order of\nmagnitude simpler and easier to manage. The information can go almost anywhere."]}),"\n",(0,a.jsx)(t.h3,{id:"help-define-this-space",children:"Help define this space"}),"\n",(0,a.jsx)(t.p,{children:"This is an evolving space and you can really help define how it works with the least possible\nimpact on project teams."})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var a=n(6540);const o={},i=a.createContext(o);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);