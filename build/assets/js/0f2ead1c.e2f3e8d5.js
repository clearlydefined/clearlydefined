"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1009],{5278:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=t(4848),i=t(8453);const s={},o="Running the Harvester",a={id:"harvest/intro",title:"Running the Harvester",description:"Local dev",source:"@site/docs/harvest/intro.md",sourceDirName:"harvest",slug:"/harvest/intro",permalink:"/docs/harvest/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/clearlydefined/clearlydefined/docs/harvest/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Harvest",permalink:"/docs/harvest/"},next:{title:"Resources",permalink:"/docs/resources/"}},l={},c=[];function d(e){const n={h1:"h1",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"running-the-harvester",children:"Running the Harvester"}),"\n",(0,r.jsx)(n.p,{children:"Local dev"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If you want to run locally, you\u2019ll need to install scancode/licensee on your local machine with paths/etc. Easier to run docker image."}),"\n",(0,r.jsx)(n.li,{children:"There is a linux Dockerfile to build a container, that is the target environment"}),"\n",(0,r.jsx)(n.li,{children:"Look at quick start in README"}),"\n",(0,r.jsx)(n.li,{children:"Template.env.json has minimal settings: file storage provider, memory incoming queue"}),"\n",(0,r.jsxs)(n.li,{children:["\u201cQueueing work with crawler\u201d: instructions once crawler is running","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Could bring up service and crawler, and send harvest to service"}),"\n",(0,r.jsx)(n.li,{children:"Easier to work with just crawler, example post message in readme"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"See \u201cBuild and run docker image locally\u201d in readme, need config file"}),"\n",(0,r.jsx)(n.li,{children:"Run docker build command"}),"\n",(0,r.jsx)(n.li,{children:"To get dev config: go to portal: cdcrawler-dev, Settings->Configuration"}),"\n",(0,r.jsx)(n.li,{children:"Uses docker\u2019s \u201cenv-file\u201d, key/value environment vars, different than env.json"}),"\n",(0,r.jsx)(n.li,{children:"From dev, change *crawler/harvest azblob_container_name, queue prefix, harvests, queue name, to be your own personal names"}),"\n",(0,r.jsx)(n.li,{children:"Crawler_service_auth_token: the token needed for the harvest queue curl command"}),"\n",(0,r.jsx)(n.li,{children:"When you use the curl command directly on the crawler, it puts a message on its own queue. You could just copy an existing harvest message from the storage queue, and put on your own named harvest queue"}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"contributing-back-to-clearlydefined",children:"Contributing back to ClearlyDefined"}),"\n",(0,r.jsx)(n.p,{children:"Technical Process:\nHow will data sent from an outside harvester be submitted to ClearlyDefined?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"put data in shared Blob storage"}),"\n",(0,r.jsx)(n.li,{children:"put on harvested queue"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"OPTIONS:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"CD adds a PUT API call that would do both adding data to Blob storage and on the harvested queue"}),"\n",(0,r.jsx)(n.li,{children:"May want to add provenance of the data to identify who contributed harvested data"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);